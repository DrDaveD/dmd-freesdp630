.\"       Copyright (c) 1989 AT&T   
.\"       All Rights Reserved       
.\"
.\"       THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T   
.\"       The copyright notice above does not evidence any     
.\"       actual or intended publication of such source code.  
.\"
.\"
.TH T_BIND 3N "630 Network Development Package" "\&"
.SH NAME
t_bind \- bind an address to a transport endpoint
.SH SYNOPSIS
.B #include <dmdtiuser.h>
.PP
.B int t_bind (fd, req, ret)
.br
.B int fd;
.br
.B struct t_bind *req;
.br
.B struct t_bind *ret;
.SH DESCRIPTION
This function
associates a protocol address
with the transport endpoint specified by
.I fd
and activates that transport endpoint.
In connection mode, the transport provider may begin accepting or requesting
connections on the transport endpoint.
In connectionless mode, the transport user may send or receive
data units through the transport endpoint.
.PP
The
.I req
and
.I ret
arguments point to a \f2t_bind\f1 structure containing the following members:
.PP
.DS
.nf
	struct netbuf addr;
	unsigned qlen;
.fi
.DE
.PP
\f2netbuf\f1 is described in \f2intro\f1(3N).
The
.I addr
field of the
.I t_bind
structure specifies a protocol address and the
.I qlen
field is used to indicate the maximum number of outstanding
connect indications.
.PP
.I req
is used to request that an address, represented by the
.I netbuf
structure, be bound to the given transport endpoint.
.I len
[see \f2netbuf\f1 in \f2intro\f1(3N); also for \f2buf\f1 and \f2maxlen\f1]
specifies the number of bytes in the address and
.I buf
points to the address buffer.
.I maxlen
has no meaning for the
.I req
argument.
On return,
.I ret
contains the address that
the transport provider actually bound to the transport endpoint;
this may be different from the address specified by the user in
.IR req .
In
.IR ret ,
the user specifies
.I maxlen
which is the maximum size of the address buffer and
.I buf
which points to the buffer where the address is to be placed.
On return,
.I len
specifies the number of bytes in the bound address
and
.I buf
points to the bound address.
If
.I maxlen
is not large enough to hold the returned address, an error will
result.
.PP
If the requested address is not available,
or if no address is specified in
.I req
(the \f2len\f1 field of \f2addr\f1 in \f2req\f1 is zero)
the transport provider will assign an appropriate address to be bound,
and will return that address in the
.I addr
field of
.IR ret .
The user can compare the addresses in
.I req
and
\f2ret\f1
to determine whether the transport provider bound the transport
endpoint to a different address than that requested.
.PP
\f2req\f1
may be \s-1NULL\s+1 if the user does not wish to specify an
address to be bound.
Here, the value of
\f2qlen\f1
is assumed to be zero, and the transport provider must assign an
address to the transport endpoint.
Similarly,
\f2ret\f1
may be \s-1NULL\s+1 if the user does not care what address was
bound by the provider and is not interested in the negotiated
value of
\f2qlen\f1.
It is valid to set
.I req
and
.I ret
to
\s-1NULL\s0
for the same call, in which case the provider chooses the address
to bind to the transport endpoint and does not return that
information to the user.
.PP
The
\f2qlen\f1
field has meaning only when initializing a connection-mode service.
It specifies the number of outstanding connect indications the transport
provider should support for the given transport endpoint.
An outstanding connect indication is one that has been passed to the transport
user by the transport provider.
A value of
\f2qlen\f1
greater than zero
is only meaningful when issued by a passive transport user that expects
other users to call it.
The value of
\f2qlen\f1
will be negotiated by the transport provider and may be changed
if the transport provider cannot support the specified number of
outstanding connect indications.
On return, the
\f2qlen\f1
field in
\f2ret\f1
will contain the negotiated value.
.PP
This function allows
more than one transport endpoint to be bound to the
same protocol address (however, the transport provider
must support this capability also), but it is not allowable to bind more than
one protocol address to the same transport endpoint.
If a user binds more than one transport endpoint to the same protocol
address, only one endpoint can be used to listen for
connect indications associated with that protocol address.
In other words, only one
\f2t_bind\f1
for a given protocol address
may specify a value of
\f2qlen\f1
greater than zero.
In this way, the transport provider can identify which transport endpoint
should be notified of an incoming connect indication.
If a user attempts to bind a protocol address to a second transport
endpoint with a value of
\f2qlen\f1
greater than zero, the transport
provider will assign another address to be bound to that
endpoint.
If a user accepts a connection on the transport endpoint that is being
used as the listening endpoint, the bound protocol address will be found to
be busy for the duration of that connection.
No other transport endpoints may be bound for listening while that initial
listening endpoint is in the data transfer phase.
This will prevent more than one transport endpoint bound to the same
protocol address from accepting connect indications.
.P
On failure,
.I t_errno
may be set to one of the following:
.TP 19
\s-1[TBADF]\s+1
The specified file descriptor does not refer to a transport endpoint.
.TP
\s-1[TOUTSTATE]\s+1
The function was issued in the wrong sequence.
.TP
\s-1[TBADADDR]\s+1
The specified protocol address was in an incorrect format or
contained illegal information.
.TP
\s-1[TNOADDR]\s+1
The transport provider could not allocate an address.
.TP
\s-1[TACCES]\s+1
The user does not have permission to use the specified address.
.TP
\s-1[TBUFOVFLW]\s+1
The number of bytes allowed for an incoming argument is not
sufficient to store the value of that argument.
The provider's state will change to
\s-1T_IDLE\s0
and the information to be returned in
.I ret
will be discarded.
.TP
\s-1[TSYSERR]\s+1
A system error has occurred during execution of this function.
.br
.ne 5
.SH SEE ALSO
intro(3N), t_open(3N),
t_optmgmt(3N),
t_unbind(3N).
.SH DIAGNOSTICS
\f2t_bind\f1
returns 0 on success and \-1 on failure and
\f2t_errno\f1 is set to indicate the error.
.Ee
